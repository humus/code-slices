Group javadefault
FluentSlice importutils
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
Group jpa
FluentSlice jpa-imports
import javax.persistence.Entity;
import javax.persistence.Column
import javax.persistence.Entity
import javax.persistence.FetchType.EAGER
import javax.persistence.GeneratedValue
import javax.persistence.Id
import javax.persistence.JoinColumn
import javax.persistence.ManyToOne
import javax.persistence.SequenceGenerator
import javax.persistence.Table
import javax.persistence.Temporal
import static javax.persistence.FetchType.LAZY
import static javax.persistence.FetchType.EAGER
import static javax.persistence.TemporalType.DATE
import static javax.persistence.TemporalType.TIME
import static javax.persistence.TemporalType.TIMESTAMP
FluentSlice mapping_id
@Id
@GeneratedValue(strategy=GenerationType.SEQUENCE, generator="")
@SequenceGenerator(name="", sequenceName="")
private Integer id;
Group rest
FluentSlice webclient
//org.apache.cxf.jaxrs.client.WebClient
WebClient webClient = new WebClient("http://localhost:8080/context/services/");
webClient.type("application/json").acccept("application/xml");
webClient.path("/resource");
try {
  webClient.post(body, response.class);
} catch (org.apache.cxf.jaxrs.client.ServerWebApplicationException e) {
  throw e;
}

Group mocks
Slice powermock-Whitebox
import org.powermock.reflect.Whitebox;
Group tests
FluentSlice selenide-statics
import static com.codeborne.selenide.Selenide.$;
import static com.codeborne.selenide.Selenide.$$;
import static com.codeborne.selenide.Selenide.open;
import static com.codeborne.selenide.Selenide.confirm;
import static com.codeborne.selenide.Selenide.dismiss;
import static com.codeborne.selenide.Selenide.executeJavaScript;
import static com.codeborne.selenide.Condition.*;
import static com.codeborne.selenide.Configuration.baseUrl;
import static com.codeborne.selenide.Configuration.timeout;

Group spring
Slice datasource
@Bean
public DriverManagerDataSource datasource() {
    DriverManagerDataSource dataSource = new DriverManagerDataSource();
    dataSource.setDriverClassName("org.postgresql.Driver");
    dataSource.setUrl("${database.url}");
    dataSource.setUsername("${database.username}");
    dataSource.setPassword("${database.password}");

    return dataSource;
}

Slice jdbcdaosupport
import org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcDaoSupport;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;

Slice springjdbcdao
{
    public int countOfActorsByFirstName(String firstName) {
        NamedParameterJdbcTemplate
        String sql = "select count(*) from T_ACTOR where first_name = :first_name";
        SqlParameterSource namedParameters = new MapSqlParameterSource("first_name", firstName);
        return this.namedParameterJdbcTemplate.queryForObject(sql, namedParameters, Integer.class);
    }
}

Slice beanpropertysqlparametersource
import org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource;
new BeanPropertySqlParameterSource(obj_source);

